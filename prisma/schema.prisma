// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum STATUS {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum EMAIL_VERIFY {
  VERIFY
  UNVERIFY
}

enum PHONE_VERIFY {
  VERIFY
  UNVERIFY
}

enum LISTING_TYPE {
  SALE
  RENTAL
}

enum PROPERTY_STATUS {
  PENDING
  CANCEL
  APPROVED
}

model User {
  id                    String         @id @default(uuid())
  name                  String         @db.VarChar(255)
  email                 String         @db.Char(50)
  phone                 String         @unique @db.Char(10)
  password              String         @db.Char(255)
  address               String         @default("")
  avatar                String         @default("")
  email_verify_token    String         @db.Text
  forgot_password_token String?        @db.Text
  date_of_birth         DateTime       @default(now())
  email_verify          EMAIL_VERIFY   @default(UNVERIFY)
  phone_verify          PHONE_VERIFY   @default(UNVERIFY)
  status                STATUS         @default(ACTIVE)
  RefreshTokens         RefreshToken[]
  UserMedias            UserMedia[]
  Submissions           Submission[]
  Properties            Property[]     @relation("UserProperties")
  OwnedProperties       Property[]     @relation("UserOwnedProperties")
  Comments              Comment[]
  role                  Role           @relation(fields: [roleCode], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_Role_idx")
  roleCode              String         @default("ROLE7")
  created_at            DateTime       @default(now())
  updated_at            DateTime       @default(now())

  @@index([roleCode], map: "FK_User_Role_idx")
}

model Role {
  code  String @id @db.VarChar(50)
  value String
  Users User[]
}

model RefreshToken {
  id         String   @id @default(uuid())
  token      String   @db.Text
  User       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_RefreshToken_User_idx")
  userId     String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@index([userId], map: "FK_RefreshToken_User_idx")
}

model UserMedia {
  id         String   @id @default(uuid())
  provider   String
  link       String
  icon       String
  User       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_UserMedia_User_idx")
  userId     String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@index([userId], map: "FK_UserMedia_User_idx")
}

model Submission {
  id         String   @id @default(uuid())
  message    String
  User       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Submission_User_idx")
  Property   Property @relation(fields: [propertyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Submission_Property_idx")
  userId     String
  propertyId String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@index([userId], map: "FK_Submission_User_idx")
  @@index([propertyId], map: "FK_Submission_Property_idx")
}

model Property {
  id               String            @id @default(uuid())
  name             String            @db.VarChar(50)
  description      String            @db.VarChar(255)
  listing_type     LISTING_TYPE
  price            Float
  status           PROPERTY_STATUS   @default(PENDING)
  isAvailable      Boolean           @default(true)
  images           Int
  bedroom_count    Int
  bathroom_count   Int
  year_built       Int
  size             Float
  feature_image    String            @db.VarChar(155)
  stars            Float
  PropertyType     PropertyType      @relation(fields: [propertyTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Property_PropertyType_idx")
  PostedBy         User              @relation(name: "UserProperties", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Property_User_idx")
  owner            User              @relation(name: "UserOwnedProperties", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Property_Owner_User_idx")
  userId           String
  ownerId          String
  propertyTypeId   String
  Submission       Submission[]
  Comments         Comment[]
  PropertyFeatures PropertyFeature[]
  Images           Image[]
  created_at       DateTime          @default(now())
  updated_at       DateTime          @default(now())

  @@index([userId], map: "FK_Property_User_idx")
  @@index([propertyTypeId], map: "FK_Property_PropertyType_idx")
  @@index([ownerId], map: "FK_Property_Owner_User_idx")
}

model Image {
  id          String   @id @default(uuid())
  description String
  Property    Property @relation(fields: [propertyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Image_Property_idx")
  propertyId  String

  @@index([propertyId], map: "FK_Image_Property_idx")
}

model PropertyType {
  id          String     @id @default(uuid())
  name        String
  description String
  image       String
  Properties  Property[]
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now())
}

model PropertyFeature {
  id         String   @id @default(uuid())
  Property   Property @relation(fields: [propertyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_PropertyFeature_Property_idx")
  Feature    Feature  @relation(fields: [featureId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_PropertyFeature_Feature_idx")
  propertyId String
  featureId  String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@index([propertyId], map: "FK_Property_User_idx")
  @@index([featureId], map: "FK_PropertyFeature_Feature_idx")
}

model Feature {
  id               String            @id @default(uuid())
  name             String
  imag             String
  PropertyFeatures PropertyFeature[]
  created_at       DateTime          @default(now())
  updated_at       DateTime          @default(now())
}

model Comment {
  id         String   @id @default(uuid())
  text       String
  parent     Int
  date       DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Comment_User_idx")
  Property   Property @relation(fields: [propertyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Comment_Property_idx")
  userId     String
  propertyId String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@index([userId], map: "FK_Comment_User_idx")
  @@index([propertyId], map: "FK_Comment_Property_idx")
}
